# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "v**"
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:
  release:
    types: [published]

jobs:

  build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install deps
      run: go get 

    - name: Build for Linux AMD64
      run: GOOS=linux GOARCH=amd64 go build -o build/xlite-reverse-proxy_linux-amd64 .

    - name: Build for Linux ARM
      run: GOOS=linux GOARCH=arm64 go build -o build/xlite-reverse-proxy_linux-arm64 .

    - name: Build for Windows AMD64
      run: GOOS=windows GOARCH=amd64 go build -o build/xlite-reverse-proxy_windows-amd64.exe .

    - name: Build for Windows ARM
      run: GOOS=windows GOARCH=arm64 go build -o build/xlite-reverse-proxy_windows-arm64.exe .

    - name: Build for macOS AMD64
      run: GOOS=darwin GOARCH=amd64 go build -o build/xlite-reverse-proxy_macos-amd64 .

    - name: Build for macOS ARM
      run: GOOS=darwin GOARCH=arm64 go build -o build/xlite-reverse-proxy_macos-arm64 .
      
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts
        path: |
          build/xlite-reverse-proxy_windows-amd64.exe
          build/xlite-reverse-proxy_windows-arm64.exe
          build/xlite-reverse-proxy_linux-amd64
          build/xlite-reverse-proxy_linux-arm64
          build/xlite-reverse-proxy_macos-amd64
          build/xlite-reverse-proxy_macos-arm64
    #   run: go test -v ./...

  release:
    runs-on: ubuntu-22.04
    needs: build # This job depends on the 'build' job to complete successfully
    # This condition ensures the 'release' job only runs when a GitHub Release is published.
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write # Grant write permission to the GITHUB_TOKEN for creating/updating releases

    steps:
    - uses: actions/checkout@v3

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts # Name of the artifact uploaded by the 'build' job
        path: build/    # Path where the artifacts will be downloaded

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: build/* # Upload all files found in the 'build/' directory to the release
